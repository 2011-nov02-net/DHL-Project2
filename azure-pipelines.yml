# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Set up of variables used in pipeline
variables:
- name: buildConfiguration
  value: 'Development' # change to 'Release' later
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.TestProjects
  value: '**/*Tests/*.csproj'

# Set up the name of each run and what it triggers on
name: $(date:yyyyMMdd)$(rev:.r)
trigger:
- master

# Define stages
stages:
# Build stage will publish artifact for deployment to app service
- stage: build

  jobs:
  - job: build
    displayName: Agent Job 1 - Build

    pool:
      vmImage: 'ubuntu-latest'

    steps:
      # Set up the enviroment to use .NET 5
      - task: UseDotNet@2
        displayName: 'Use .NET 5 SDK'
        inputs:
          packageType: 'sdk'
          version: '5.x'
          includePreviewVersions: true
  
      # Restore 
      - task: DotNetCoreCLI@2
        displayName: Dotnet Restore
        inputs: 
          command: restore
          projects: $(BuildParameters.RestoreBuildProjects)
  
      # Build new Files
      - task: DotNetCoreCLI@2
        displayName: Dotnet Build
        inputs:
          command: build
          projects: '$(BuildParameters.RestoreBuildProjects)'
          arguments: '--configuration $(BuildConfiguration)'
        
      # Publish the artifact
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)
          TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
    
- stage: SonarCloud
  jobs:
  - job: Testing

    pool: 
      vmImage: 'ubuntu-latest'
    
    steps:
    # To keep sonar cloud happy, prepare it in .NET 2.x
    - task: UseDotNet@2
      displayName: 'Use .NET 2.x SDK'
      inputs:
        packageType: 'sdk'
        version: '2.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    # Set up sonar cloud with the project details
    - task: SonarCloudPrepare@1
      displayName: Prepare for SonarCloud
      continueOnError: True
      inputs:
        SonarCloud: 'SonarCloud Project 2'
        organization: '2011-nov02-net'
        scannerMode: 'MSBuild'
        projectKey: '2011-nov02-net_DHL-Project2'
        projectName: 'DHL-Project2'
        extraProperties: |
          sonar.exclusions=**/lib/**
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

    # Convert back to .NET 5
    - task: UseDotNet@2
      displayName: 'Use .NET 5 SDK'
      inputs:
        packageType: 'sdk'
        version: '5.0.100'
        installationPath: $(Agent.ToolsDirectory)/dotnet
        
    # Build the project
    - task: DotNetCoreCLI@2
      displayName: Dotnet Build
      inputs:
        command: build
        projects: '$(BuildParameters.RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'

    # Run tests and publish the results
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'
        publishTestResults: true
    
    # Run the sonar cloud analysis
    - task: SonarCloudAnalyze@1
      displayName: Analyze on Sonarcloud
      continueOnError: True
    
    # Push results to Sonar Cloud
    - task: SonarCloudPublish@1
      displayName: Publish SonarCloud Results
      continueOnError: True
      inputs:
        pollingTimeoutSec: '300'